name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    strategy:
      matrix:
        dockerfile:
          - neural-engine/docker/Dockerfile.mcp-server
      max-parallel: 1  # Limit parallel builds to save disk space
    steps:
      - uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          # Free up space on GitHub runner
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          docker system prune -af
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: neural-engine
          file: ${{ matrix.dockerfile }}
          push: false
          load: true
          tags: neurascale/test:${{ github.sha }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: neurascale/test:${{ github.sha }}
          format: 'table'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          vuln-type: 'os'
          trivyignores: '.trivyignore'

      - name: Clean up Docker
        if: always()
        run: |
          docker rmi neurascale/test:${{ github.sha }} || true
          docker system prune -af

  dependency-check:
    name: Python Dependency Security Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.11'

      - name: Install safety
        run: pip install safety

      - name: Check Python dependencies
        run: |
          cd neural-engine
          # Run safety check and capture output
          safety check -r requirements.txt || echo "Safety check completed with warnings"


  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail the build for secret scanning
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better scanning

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_ENABLE_COMMENTS: false
