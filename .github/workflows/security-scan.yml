name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    strategy:
      matrix:
        dockerfile:
          # Alpine-based containers (smaller, more secure)
          - neural-engine/docker/Dockerfile.api
          - neural-engine/docker/Dockerfile.ingestion
          - neural-engine/docker/Dockerfile.mcp-server
          # NVIDIA CUDA-based containers (for ML/AI workloads)
          - neural-engine/docker/Dockerfile.processor
          - neural-engine/docker/Dockerfile.processor.hybrid
      max-parallel: 2  # Balance between speed and disk usage
    steps:
      - uses: actions/checkout@v4

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # Free up disk space by removing unnecessary tools and files
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host
          buildkitd-config-inline: |
            [worker.oci]
              max-parallelism = 2
            [registry."docker.io"]
              mirrors = ["mirror.gcr.io"]

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: neural-engine
          file: ${{ matrix.dockerfile }}
          push: false
          load: true
          tags: neurascale/test:${{ github.sha }}-${{ strategy.job-index }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            DOCKER_BUILDKIT=1

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: neurascale/test:${{ github.sha }}-${{ strategy.job-index }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          vuln-type: 'os,library'
          trivyignores: '.trivyignore'
          timeout: '20m'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'
          category: trivy-${{ matrix.dockerfile }}

      - name: Display Trivy Summary
        if: always()
        run: |
          echo "Scanning image with Trivy for summary..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image \
            --severity CRITICAL,HIGH \
            --ignore-unfixed \
            --no-progress \
            --format table \
            neurascale/test:${{ github.sha }}-${{ strategy.job-index }} || true

      - name: Clean up Docker resources
        if: always()
        run: |
          docker rmi neurascale/test:${{ github.sha }}-${{ strategy.job-index }} || true
          docker system prune -af --volumes
          df -h

  dependency-check:
    name: Python Dependency Security Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install safety
        run: pip install safety

      - name: Create safety check script
        run: |
          cat > /tmp/check_safety.py << 'EOF'
          #!/usr/bin/env python3
          import json
          import sys
          import subprocess

          def check_safety():
              try:
                  # Run safety check and capture output
                  result = subprocess.run(
                      ['safety', 'check', '-r', 'requirements.txt', '--json'],
                      capture_output=True,
                      text=True,
                      cwd='neural-engine'
                  )

                  if result.stdout:
                      try:
                          data = json.loads(result.stdout)
                          if isinstance(data, list) and len(data) > 0:
                              print(f'⚠️ Found {len(data)} vulnerability(ies) in Python dependencies')
                              for vuln in data[:10]:  # Show first 10
                                  pkg = vuln.get('package', 'Unknown')
                                  desc = vuln.get('vulnerability', 'No description')
                                  severity = vuln.get('severity', 'Unknown')
                                  print(f'  - {pkg}: {desc} (Severity: {severity})')
                              return 1
                          else:
                              print('✅ No known vulnerabilities found in Python dependencies')
                              return 0
                      except json.JSONDecodeError:
                          print('Safety check completed - no JSON output (likely no vulnerabilities)')
                          return 0
                  else:
                      print('✅ No known vulnerabilities found in Python dependencies')
                      return 0
              except Exception as e:
                  print(f'Error running safety check: {e}')
                  return 1

          if __name__ == '__main__':
              sys.exit(check_safety())
          EOF
          chmod +x /tmp/check_safety.py

      - name: Check Python dependencies
        run: |
          python3 /tmp/check_safety.py || echo "Safety check completed"

      - name: Generate safety report
        run: |
          cd neural-engine
          safety check -r requirements.txt --json --output safety-report.json || true

      - name: Upload safety report
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('neural-engine/safety-report.json') != ''
        with:
          name: safety-report
          path: neural-engine/safety-report.json

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Gitleaks config
        run: |
          cat > .gitleaks.toml << 'EOF'
          title = "Gitleaks Configuration"

          # Extend the base configuration
          [extend]
          useDefault = true

          # Additional patterns to ignore
          [[allowlist]]
          description = "Allow mock/test API keys"
          regexes = [
            '''test[_-]?api[_-]?key''',
            '''mock[_-]?secret''',
            '''example[_-]?token''',
            '''dummy[_-]?password'''
          ]

          [[allowlist]]
          description = "Allow localhost URLs"
          regexes = [
            '''https?://localhost''',
            '''https?://127\.0\.0\.1'''
          ]

          [[allowlist]]
          description = "Allow documentation files"
          paths = [
            '''.gitleaks.toml''',
            '''.*\.md$''',
            '''.*\.txt$''',
            '''.*\.lock$''',
            '''.*\.yaml$''',
            '''.*\.yml$'''
          ]

          [[allowlist]]
          description = "Allow public environment variables"
          regexes = [
            '''NEXT_PUBLIC_[A-Z_]+''',
            '''VITE_[A-Z_]+''',
            '''REACT_APP_[A-Z_]+'''
          ]
          EOF

      - name: Run Gitleaks
        run: |
          # Download and run Gitleaks directly to avoid action issues
          wget -q https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.2_linux_x64.tar.gz

          # Run scan and capture results
          ./gitleaks detect --source . --config .gitleaks.toml --report-format sarif --report-path gitleaks.sarif --no-git --redact || {
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 1 ]; then
              echo "⚠️ Potential secrets detected. Review the SARIF report."
            else
              echo "Gitleaks scan completed with exit code: $EXIT_CODE"
            fi
          }

      - name: Upload Gitleaks results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('gitleaks.sarif') != ''
        with:
          sarif_file: gitleaks.sarif
          category: secret-scanning
