# Neural Engine Processor Dockerfile
# Using NVIDIA CUDA base for TensorFlow/PyTorch with GPU support
# This image includes CUDA 12.6 runtime, Ubuntu 24.04 LTS (latest)
FROM nvidia/cuda:12.6.0-runtime-ubuntu24.04 AS base

# Install Python 3.13
RUN apt-get update && apt-get install -y --no-install-recommends \
    software-properties-common \
    && add-apt-repository ppa:deadsnakes/ppa \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
    python3.13 \
    python3.13-dev \
    python3.13-venv \
    python3-pip \
    && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.13 1 \
    && update-alternatives --install /usr/bin/python python /usr/bin/python3.13 1 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Security updates
RUN apt-get update && apt-get upgrade -y && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    libhdf5-dev \
    libopenblas-dev \
    liblapack-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set pip environment with increased timeout
ENV PIP_DEFAULT_TIMEOUT=300 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_RETRIES=3

# First stage: Dependencies
FROM base AS dependencies
# Copy requirements and constraints
COPY requirements.txt .
COPY constraints.txt .
# Install dependencies in chunks to avoid timeout
# Use --break-system-packages for Ubuntu 24.04 pip
RUN python3.13 -m pip install --break-system-packages --upgrade pip setuptools wheel && \
    # Install core dependencies first
    grep -E '^(numpy|scipy|scikit-learn|pandas|joblib|h5py|matplotlib|pywavelets|lz4|msgpack)' requirements.txt | \
    python3.13 -m pip install --break-system-packages -c constraints.txt -r /dev/stdin && \
    # Install deep learning dependencies
    grep -E '^(torch|tensorflow|tensorboard)' requirements.txt | \
    python3.13 -m pip install --break-system-packages -c constraints.txt -r /dev/stdin && \
    # Install Google Cloud dependencies
    grep -E '^google-cloud-' requirements.txt | \
    python3.13 -m pip install --break-system-packages -c constraints.txt -r /dev/stdin && \
    # Install remaining dependencies
    python3.13 -m pip install --break-system-packages -c constraints.txt -r requirements.txt

# Second stage: Application
FROM dependencies AS app
# Copy source code
COPY src/ ./src/
COPY processing/ ./processing/
COPY devices/ ./devices/
COPY api/ ./api/
COPY monitoring/ ./monitoring/
COPY security/ ./security/
COPY ledger/ ./ledger/
COPY setup.py .
COPY README.md .

# Install the package
RUN python3.13 -m pip install --break-system-packages -e .

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/key.json

# Run the processor
CMD ["python", "-m", "processors.main"]
