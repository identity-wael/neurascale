name: Docker Build and Push (Fixed)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
  push:
    branches:
      - main
      - staging
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - staging
      - develop
    paths:
      - 'neural-engine/**'
      - '.github/workflows/docker-build-fixed.yml'

permissions:
  contents: read
  id-token: write
  packages: write
  security-events: write
  pull-requests: write

env:
  GCP_REGION: northamerica-northeast1
  REGISTRY: northamerica-northeast1-docker.pkg.dev

jobs:
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      project_id: ${{ steps.set-env.outputs.project_id }}
    steps:
      - name: Set environment based on branch
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For PRs, use the target branch to determine environment
            if [[ "${{ github.base_ref }}" == "main" ]]; then
              ENVIRONMENT="staging"  # PRs to main test in staging
            elif [[ "${{ github.base_ref }}" == "staging" ]]; then
              ENVIRONMENT="staging"  # PRs to staging deploy to staging
            elif [[ "${{ github.base_ref }}" == "develop" ]]; then
              ENVIRONMENT="development"
            else
              ENVIRONMENT="development"
            fi
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            ENVIRONMENT="production"
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            ENVIRONMENT="staging"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            ENVIRONMENT="development"
          else
            ENVIRONMENT="development"
          fi

          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "project_id=${ENVIRONMENT}-neurascale" >> $GITHUB_OUTPUT
          echo "Deploying to: ${ENVIRONMENT} (project: ${ENVIRONMENT}-neurascale)"

  build:
    name: Build Docker Images
    needs: determine-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write

    strategy:
      matrix:
        service:
          - neural-processor
          - device-manager
          - api-gateway
          - ml-pipeline
          - mcp-server

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate PR Build Configuration
        if: github.event_name == 'pull_request'
        run: |
          echo "Running PR validation checks..."
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "PR Branch: ${{ github.head_ref }}"
          echo "Target Branch: ${{ github.base_ref }}"

          # Validate Dockerfiles exist
          for service in neural-processor device-manager api-gateway ml-pipeline mcp-server; do
            dockerfile="neural-engine/docker/dockerfiles/services/${service}/Dockerfile"
            if [[ ! -f "$dockerfile" ]]; then
              echo "ERROR: Dockerfile not found: $dockerfile"
              exit 1
            fi
          done

          echo "‚úì All Dockerfiles found"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Debug Authentication Context
        run: |
          echo "=== Authentication Debug Info ==="
          echo "Event Name: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "Ref: ${{ github.ref }}"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "PR Number: ${{ github.event.pull_request.number }}"
            echo "PR Head Repo: ${{ github.event.pull_request.head.repo.full_name }}"
            echo "PR Base Ref: ${{ github.base_ref }}"
          fi
          echo "OIDC Token URL Present: ${{ env.ACTIONS_ID_TOKEN_REQUEST_URL != '' }}"
          echo "OIDC Token Present: ${{ env.ACTIONS_ID_TOKEN_REQUEST_TOKEN != '' }}"
          echo "============================="

      - name: Verify PR Source
        if: github.event_name == 'pull_request'
        run: |
          if [[ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]]; then
            echo "‚ùå ERROR: This PR is from a fork!"
            echo ""
            echo "For security reasons, PRs must be created from branches in the main repository."
            echo "Please:"
            echo "1. Fork the repository (if you haven't already)"
            echo "2. Clone your fork locally"
            echo "3. Add the upstream remote: git remote add upstream https://github.com/${{ github.repository }}.git"
            echo "4. Create a branch in the main repository: git push upstream <your-branch-name>"
            echo "5. Create your PR from that branch"
            echo ""
            echo "This ensures full production-level testing for all PRs."
            exit 1
          fi

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ needs.determine-environment.outputs.project_id }}
          workload_identity_provider: 'projects/555656387124/locations/global/workloadIdentityPools/github-actions/providers/github'
          service_account: 'github-actions@neurascale.iam.gserviceaccount.com'
          token_format: 'access_token'
          access_token_lifetime: '3600s'

      - name: Configure Docker for Google Artifact Registry
        run: |
          echo "${{ steps.auth.outputs.access_token }}" | docker login -u oauth2accesstoken --password-stdin https://${{ env.REGISTRY }}

      - name: Set up Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ needs.determine-environment.outputs.project_id }}/neural-engine-${{ needs.determine-environment.outputs.environment }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.determine-environment.outputs.environment }}-latest

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: neural-engine/docker/dockerfiles/services/${{ matrix.service }}/Dockerfile
          push: true  # Always push to test full pipeline
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=buildkit-${{ matrix.service }}-${{ needs.determine-environment.outputs.environment }}
          cache-to: type=gha,mode=max,scope=buildkit-${{ matrix.service }}-${{ needs.determine-environment.outputs.environment }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ github.sha }}
            ENVIRONMENT=${{ needs.determine-environment.outputs.environment }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        if: success()
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: success() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'

      - name: PR Build Validation Summary
        if: github.event_name == 'pull_request'
        run: |
          echo "=== PR Build Validation Summary ==="
          echo "Service: ${{ matrix.service }}"
          echo "Target Environment: ${{ needs.determine-environment.outputs.environment }}"
          echo "Target Project: ${{ needs.determine-environment.outputs.project_id }}"

          # Check authentication
          if [[ "${{ steps.auth.outcome }}" == "success" ]]; then
            echo "‚úì Google Cloud authentication successful"
          else
            echo "‚úó Google Cloud authentication failed"
            exit 1
          fi

          # Check if image was built and pushed
          if [[ "${{ steps.build.outcome }}" == "success" ]]; then
            echo "‚úì Docker build and push successful"
            echo "  Image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}"
          else
            echo "‚úó Docker build failed"
            exit 1
          fi

          # Check if Trivy scan ran
          if [[ -f "trivy-results.sarif" ]]; then
            echo "‚úì Trivy security scan completed"
            echo "  Results saved to trivy-results.sarif"
          else
            echo "‚ö† Trivy scan did not produce results"
          fi

          echo ""
          echo "üöÄ Full production-identical testing completed for PR #${{ github.event.pull_request.number }}"
          echo "Images pushed to ${{ needs.determine-environment.outputs.environment }} registry"
          echo "Ready for deployment to ${{ needs.determine-environment.outputs.environment }}"
          echo "=== PR validation complete ==="

  deploy:
    name: Deploy to Environment
    needs: [determine-environment, build]
    runs-on: ubuntu-latest
    if: |
      needs.determine-environment.outputs.environment != 'production' ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    environment: ${{ needs.determine-environment.outputs.environment }}
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ needs.determine-environment.outputs.project_id }}
          workload_identity_provider: 'projects/555656387124/locations/global/workloadIdentityPools/github-actions/providers/github'
          service_account: 'github-actions@neurascale.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to GKE
        run: |
          echo "Deploying to ${{ needs.determine-environment.outputs.environment }} environment"
          echo "Project: ${{ needs.determine-environment.outputs.project_id }}"

          # Get GKE credentials
          gcloud container clusters get-credentials neural-engine-${{ needs.determine-environment.outputs.environment }} \
            --region ${{ env.GCP_REGION }} \
            --project ${{ needs.determine-environment.outputs.project_id }}

          # Deploy using Helm
          cd neural-engine/kubernetes/helm

          # Update values for environment
          helm upgrade --install neural-engine ./neural-engine \
            --namespace neural-engine \
            --create-namespace \
            --values ./neural-engine/values-${{ needs.determine-environment.outputs.environment }}.yaml \
            --set image.registry=${{ env.REGISTRY }} \
            --set image.repository=${{ needs.determine-environment.outputs.project_id }}/neural-engine-${{ needs.determine-environment.outputs.environment }} \
            --set image.tag=${{ github.sha }} \
            --wait \
            --timeout 10m

      - name: Deployment Summary
        if: always()
        run: |
          echo "=== Deployment Summary ==="
          echo "Environment: ${{ needs.determine-environment.outputs.environment }}"
          echo "Project: ${{ needs.determine-environment.outputs.project_id }}"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "PR #${{ github.event.pull_request.number }} deployed to ${{ needs.determine-environment.outputs.environment }}"
            echo "Preview URL: https://${{ needs.determine-environment.outputs.environment }}-neural-engine.neurascale.com"
          fi
          echo "=== Deployment complete ==="
