version: '3.9'

# Production overrides for Docker Compose
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

services:
  neural-processor:
    image: neurascale/neural-processor:${VERSION:-latest}
    restart: always
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '${NEURAL_PROCESSOR_CPU_LIMIT:-2}'
          memory: ${NEURAL_PROCESSOR_MEMORY_LIMIT:-4G}
        reservations:
          cpus: '1'
          memory: 2G
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
    environment:
      - NEURAL_ENGINE_ENV=production
      - LOG_LEVEL=info
      - METRICS_ENABLED=true
      - TRACING_ENABLED=true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  device-manager:
    image: neurascale/device-manager:${VERSION:-latest}
    container_name: neural-device-manager
    restart: always
    privileged: true  # Required for USB device access
    devices:
      - /dev/bus/usb:/dev/bus/usb
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      - DEVICE_MANAGER_ENV=production
      - LOG_LEVEL=info
    ports:
      - "8081:8081"
      - "50052:50052"
    networks:
      - neural-net
    volumes:
      - /dev:/dev:ro
      - device-data:/var/lib/device-manager

  api-gateway:
    image: neurascale/api-gateway:${VERSION:-latest}
    container_name: neural-api-gateway
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    environment:
      - NODE_ENV=production
      - PORT=4000
      - ENABLE_GRAPHQL_PLAYGROUND=false
      - ENABLE_INTROSPECTION=false
      - RATE_LIMIT_WINDOW=60000
      - RATE_LIMIT_MAX=100
    ports:
      - "4000:4000"
    networks:
      - neural-net
    depends_on:
      - neural-processor
      - device-manager

  ml-pipeline:
    image: neurascale/ml-pipeline:${VERSION:-latest}
    container_name: neural-ml-pipeline
    restart: always
    deploy:
      resources:
        limits:
          cpus: '${ML_PIPELINE_CPU_LIMIT:-4}'
          memory: ${ML_PIPELINE_MEMORY_LIMIT:-8G}
          devices:
            - driver: nvidia
              count: ${GPU_COUNT:-0}
              capabilities: [gpu]
        reservations:
          cpus: '2'
          memory: 4G
    environment:
      - ML_PIPELINE_ENV=production
      - MODEL_CACHE_SIZE=10GB
      - ENABLE_GPU=${ENABLE_GPU:-false}
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-0}
    ports:
      - "8082:8082"
      - "50053:50053"
    networks:
      - neural-net
    volumes:
      - ml-models:/app/models:ro
      - ml-cache:/app/cache

  # Production database with replication
  postgres:
    image: postgres:16-alpine
    restart: always
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_REPLICATION_MODE=master
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD_FILE=/run/secrets/db_replication_password
    secrets:
      - db_password
      - db_replication_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Redis with persistence
  redis:
    image: redis:7-alpine
    restart: always
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: neural-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    networks:
      - neural-net
    depends_on:
      - api-gateway
      - neural-processor

  # Monitoring stack
  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./monitoring/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - neural-net

  alertmanager:
    image: prom/alertmanager:latest
    restart: always
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    networks:
      - neural-net

  # Log aggregation
  loki:
    image: grafana/loki:latest
    restart: always
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    networks:
      - neural-net

  promtail:
    image: grafana/promtail:latest
    restart: always
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - neural-net

# Production secrets
secrets:
  db_password:
    external: true
  db_replication_password:
    external: true

# Production volumes
volumes:
  neural-data:
    driver: local
  neural-logs:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  kafka-data:
    driver: local
  zookeeper-data:
    driver: local
  device-data:
    driver: local
  ml-models:
    driver: local
  ml-cache:
    driver: local
  prometheus-data:
    driver: local
  alertmanager-data:
    driver: local
  loki-data:
    driver: local
  nginx-cache:
    driver: local

# Production network with encryption
networks:
  neural-net:
    driver: overlay
    driver_opts:
      encrypted: "true"
    ipam:
      config:
        - subnet: 172.20.0.0/16
