name: Docker Build and Push

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'neural-engine/**'
      - '.github/workflows/docker-build.yml'

env:
  REGISTRY: gcr.io
  PROJECT_ID: development-neurascale

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write

    strategy:
      matrix:
        service:
          - neural-processor
          - device-manager
          - api-gateway
          - ml-pipeline
          - mcp-server

    steps:
      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check build context size
        run: |
          echo "Build context size:"
          du -sh .
          echo "Large directories:"
          du -sh */ 2>/dev/null | sort -hr | head -10 || true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Google Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=sha-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: neural-engine/docker/dockerfiles/services/${{ matrix.service }}/Dockerfile
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=buildkit-${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=buildkit-${{ matrix.service }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ github.sha }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run container structure tests
        run: |
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64

          # Run tests if config exists
          if [ -f "neural-engine/docker/tests/${{ matrix.service }}-test.yaml" ]; then
            ./container-structure-test-linux-amd64 test \
              --image ${{ fromJSON(steps.meta.outputs.json).tags[0] }} \
              --config neural-engine/docker/tests/${{ matrix.service }}-test.yaml
          fi

      - name: Push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: neural-engine/docker/dockerfiles/services/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-tools:
    name: Build Tool Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      matrix:
        tool:
          - cli
          - test-runner

    steps:
      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check build context size
        run: |
          echo "Build context size:"
          du -sh .
          echo "Large directories:"
          du -sh */ 2>/dev/null | sort -hr | head -10 || true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Google Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/neural-${{ matrix.tool }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix=sha-

      - name: Build and push tool image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: neural-engine/docker/dockerfiles/tools/${{ matrix.tool }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=buildkit-tool-${{ matrix.tool }}
          cache-to: type=gha,mode=max,scope=buildkit-tool-${{ matrix.tool }}

  build-base-images:
    name: Build Base Images
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        base:
          - python
          - golang
          - node
          - ml-base

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check build context size
        run: |
          echo "Build context size:"
          du -sh .
          echo "Large directories:"
          du -sh */ 2>/dev/null | sort -hr | head -10 || true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Google Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}

      - name: Build and push base image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: neural-engine/docker/dockerfiles/base/${{ matrix.base }}.Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/base:${{ matrix.base }}
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/base:${{ matrix.base }}-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration-test:
    name: Integration Tests
    needs: [build, build-tools]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build service images locally
        run: |
          export REGISTRY=${{ env.REGISTRY }}
          export PROJECT_ID=${{ env.PROJECT_ID }}
          export TAG=pr-${{ github.event.pull_request.number }}

          # Build all service images locally with the correct tags
          for service in neural-processor device-manager api-gateway ml-pipeline mcp-server; do
            docker build -t ${REGISTRY}/${PROJECT_ID}/${service}:${TAG} \
              -f neural-engine/docker/dockerfiles/services/${service}/Dockerfile \
              .
          done

      - name: Start services
        run: |
          cd neural-engine
          export REGISTRY=${{ env.REGISTRY }}
          export PROJECT_ID=${{ env.PROJECT_ID }}
          export TAG=pr-${{ github.event.pull_request.number }}
          export DB_PASSWORD=test
          export REDIS_PASSWORD=test

          # Build test runner image first
          docker build -t ${REGISTRY}/${PROJECT_ID}/neural-test-runner:${TAG} \
            -f docker/dockerfiles/tools/test-runner/Dockerfile \
            ../

          docker compose -f docker/compose/docker-compose.yml \
                        -f docker/compose/docker-compose.test.yml \
                        up -d

      - name: Wait for services
        run: |
          cd neural-engine
          export REGISTRY=${{ env.REGISTRY }}
          export PROJECT_ID=${{ env.PROJECT_ID }}
          export TAG=pr-${{ github.event.pull_request.number }}
          export DB_PASSWORD=test
          export REDIS_PASSWORD=test
          echo "Waiting for services to become healthy..."
          docker compose -f docker/compose/docker-compose.yml ps

          # Show neural-processor logs to debug startup issues
          echo "=== Initial neural-processor logs ==="
          docker compose -f docker/compose/docker-compose.yml logs neural-processor

          # Check if port 8080 is listening
          echo "=== Checking if neural-processor is listening on port 8080 ==="
          docker compose -f docker/compose/docker-compose.yml exec -T neural-processor netstat -tlnp || true

          timeout 300 bash -c 'export DB_PASSWORD=test; export REDIS_PASSWORD=test; until docker compose -f docker/compose/docker-compose.yml ps | grep -q "healthy"; do sleep 5; echo "Waiting for services..."; docker compose -f docker/compose/docker-compose.yml ps; done'

      - name: Run integration tests
        run: |
          cd neural-engine
          export REGISTRY=${{ env.REGISTRY }}
          export PROJECT_ID=${{ env.PROJECT_ID }}
          export TAG=pr-${{ github.event.pull_request.number }}
          export DB_PASSWORD=test
          export REDIS_PASSWORD=test

          docker compose -f docker/compose/docker-compose.yml \
                        -f docker/compose/docker-compose.test.yml \
                        run integration-tests

      - name: Check service logs
        if: failure()
        run: |
          cd neural-engine
          export DB_PASSWORD=test
          export REDIS_PASSWORD=test
          echo "=== Docker compose status ==="
          docker compose -f docker/compose/docker-compose.yml ps
          echo "=== Neural processor logs ==="
          docker compose -f docker/compose/docker-compose.yml logs neural-processor
          echo "=== All service logs ==="
          docker compose -f docker/compose/docker-compose.yml logs

      - name: Stop services
        if: always()
        run: |
          cd neural-engine
          export DB_PASSWORD=test
          export REDIS_PASSWORD=test
          docker compose -f docker/compose/docker-compose.yml down -v

  security-scan:
    name: Security Scan Summary
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Create scan summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All images have been scanned for vulnerabilities." >> $GITHUB_STEP_SUMMARY
          echo "Check the Security tab for detailed results." >> $GITHUB_STEP_SUMMARY
