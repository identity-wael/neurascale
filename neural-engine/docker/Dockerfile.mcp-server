# Multi-stage Dockerfile for NeuraScale MCP Server
# Optimized for production deployment with minimal attack surface

# Build stage - compile dependencies and prepare application
FROM python:3.12-alpine AS builder

# Set build arguments
ARG BUILDKIT_INLINE_CACHE=1
ARG DOCKER_BUILDKIT=1
ARG BUILDKIT_PARALLELISM=12

# Install build dependencies
RUN apk add --no-cache \
    build-base \
    musl-dev \
    linux-headers \
    gcc \
    g++ \
    git \
    curl

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip and install build tools
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# Copy requirements first for better caching
# Using requirements without ML libraries for Alpine compatibility
COPY requirements-no-ml.txt ./requirements.txt
COPY constraints.txt ./

# Install Python dependencies (no ML libraries)
RUN pip install --no-cache-dir -r requirements.txt

# Install additional MCP server dependencies
RUN pip install --no-cache-dir \
    websockets==12.0 \
    uvloop==0.21.0 \
    jsonschema==4.21.1 \
    PyYAML==6.0.1

# Copy source code and build files
COPY src/ /app/src/
COPY setup.py /app/
COPY pyproject.toml /app/
# Copy README.md if it exists (optional for build)
COPY README.md* /app/

# Install the application
WORKDIR /app
RUN pip install --no-cache-dir -e .

# Production stage - minimal runtime environment
FROM python:3.12-alpine AS production

# Create non-root user for security
RUN addgroup -g 1000 mcp && \
    adduser -u 1000 -G mcp -s /bin/sh -D mcp

# Install only runtime dependencies
RUN apk add --no-cache \
    ca-certificates \
    curl

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
ENV PYTHONPATH="/app/src:${PYTHONPATH:-}"

# Copy application files
COPY --from=builder /app/src /app/src
COPY --from=builder /app/src/mcp/config/server_config.yaml /app/config/server_config.yaml
RUN chown -R mcp:mcp /app/config

# Create necessary directories
RUN mkdir -p /app/logs /app/data && \
    chown -R mcp:mcp /app

# Switch to non-root user
USER mcp
WORKDIR /app

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV ENVIRONMENT=production
ENV MCP_CONFIG_PATH=/app/config/server_config.yaml
ENV PORT=8080

# Health check using curl
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose port
EXPOSE 8080

# Command to run the MCP server
CMD ["sh", "-c", "python -m src.mcp.main --config /app/config/server_config.yaml --port ${PORT:-8080}"]
