// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  firebaseUid   String    @unique @map("firebase_uid")
  emailVerified Boolean   @default(false) @map("email_verified")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Console-specific fields
  role          UserRole  @default(USER)
  organization  String?
  department    String?
  lastLoginAt   DateTime? @map("last_login_at")
  isActive      Boolean   @default(true) @map("is_active")

  // Relationships
  projects      Project[]
  activityLogs  ActivityLog[]
  subscription  Subscription?
  invoices      Invoice[]
  usageRecords  UsageRecord[]

  @@map("users")
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Owner relationship
  ownerId     String    @map("owner_id")
  owner       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Project resources
  resources   Resource[]

  @@map("projects")
}

model Resource {
  id          String       @id @default(cuid())
  name        String
  type        ResourceType
  status      ResourceStatus @default(CREATING)
  region      String?
  zone        String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  // Configuration as JSON
  config      Json?

  // Project relationship
  projectId   String       @map("project_id")
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("resources")
}

model ActivityLog {
  id          String    @id @default(cuid())
  action      String
  resource    String?
  details     Json?
  timestamp   DateTime  @default(now())

  // User relationship
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum ProjectStatus {
  ACTIVE
  SUSPENDED
  ARCHIVED
}

enum ResourceType {
  COMPUTE_ENGINE
  CLOUD_SQL
  CLOUD_STORAGE
  KUBERNETES_CLUSTER
  CLOUD_FUNCTION
  NEURAL_PROCESSOR
  BRAIN_INTERFACE
  VR_INSTANCE
}

enum ResourceStatus {
  CREATING
  RUNNING
  STOPPED
  ERROR
  DELETING
}

// Billing models
model Subscription {
  id                   String    @id @default(cuid())
  stripeCustomerId     String    @unique @map("stripe_customer_id")
  stripeSubscriptionId String?   @unique @map("stripe_subscription_id")
  stripePriceId        String?   @map("stripe_price_id")

  status               SubscriptionStatus @default(INCOMPLETE)
  plan                 SubscriptionPlan   @default(FREE)

  currentPeriodStart   DateTime? @map("current_period_start")
  currentPeriodEnd     DateTime? @map("current_period_end")
  cancelAtPeriodEnd    Boolean   @default(false) @map("cancel_at_period_end")

  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  // User relationship
  userId               String    @unique @map("user_id")
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Invoice {
  id                String    @id @default(cuid())
  stripeInvoiceId   String    @unique @map("stripe_invoice_id")

  amountPaid        Int       @map("amount_paid") // in cents
  amountDue         Int       @map("amount_due") // in cents
  currency          String    @default("usd")
  status            String

  hostedInvoiceUrl  String?   @map("hosted_invoice_url")
  invoicePdf        String?   @map("invoice_pdf")

  periodStart       DateTime  @map("period_start")
  periodEnd         DateTime  @map("period_end")

  createdAt         DateTime  @default(now()) @map("created_at")

  // User relationship
  userId            String    @map("user_id")
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model UsageRecord {
  id                String    @id @default(cuid())

  resourceType      ResourceType @map("resource_type")
  quantity          Int
  unitPrice         Int       @map("unit_price") // in cents
  totalPrice        Int       @map("total_price") // in cents

  periodStart       DateTime  @map("period_start")
  periodEnd         DateTime  @map("period_end")

  createdAt         DateTime  @default(now()) @map("created_at")

  // User relationship
  userId            String    @map("user_id")
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("usage_records")
}

enum SubscriptionStatus {
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

enum SubscriptionPlan {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}
