# Multi-stage Dockerfile for NeuraScale MCP Server
# Optimized for production deployment with minimal attack surface

# Build stage - compile dependencies and prepare application
FROM python:3.12-slim AS builder

# Set build arguments
ARG BUILDKIT_INLINE_CACHE=1
ARG DOCKER_BUILDKIT=1
ARG BUILDKIT_PARALLELISM=12

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip and install build tools
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# Copy requirements first for better caching
COPY requirements.txt ./

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Install additional MCP server dependencies
RUN pip install --no-cache-dir \
    websockets==12.0 \
    uvloop==0.19.0 \
    jsonschema==4.21.1 \
    PyYAML==6.0.1 \
    google-cloud-secret-manager==2.21.1 \
    aiohttp==3.9.1

# Copy source code
COPY src/ /app/src/
COPY setup.py pyproject.toml /app/

# Install the application
WORKDIR /app
RUN pip install --no-cache-dir -e .

# Production stage - minimal runtime environment
FROM python:3.12-slim AS production

# Create non-root user for security
RUN groupadd --gid 1000 mcp && \
    useradd --uid 1000 --gid mcp --shell /bin/bash --create-home mcp

# Install only runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
ENV PYTHONPATH="/app/src:$PYTHONPATH"

# Copy application files
COPY --from=builder /app/src /app/src
COPY --chown=mcp:mcp src/mcp/config/server_config.yaml /app/config/server_config.yaml

# Create necessary directories
RUN mkdir -p /app/logs /app/data && \
    chown -R mcp:mcp /app

# Switch to non-root user
USER mcp
WORKDIR /app

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV ENVIRONMENT=production
ENV MCP_CONFIG_PATH=/app/config/server_config.yaml
ENV PORT=8080

# Health check using curl
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose port
EXPOSE 8080

# Command to run the MCP server
CMD ["python", "-m", "src.mcp.main", "--config", "/app/config/server_config.yaml", "--port", "8080"]
