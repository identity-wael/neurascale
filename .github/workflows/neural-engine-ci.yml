name: Neural Engine CI/CD

on:
  push:
    branches:
      - main
      - 'feat/neural-*'
    paths:
      - 'neural-engine/**'
      - '.github/workflows/neural-engine-ci.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'neural-engine/**'
  workflow_dispatch:
    inputs:
      use_self_hosted:
        description: 'Use self-hosted runner'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: northamerica-northeast1
  PYTHON_VERSION: '3.12'  # Stable Python version
  # M3 Pro optimizations
  PARALLEL_JOBS: 12
  MAKEFLAGS: "-j12"
  CMAKE_BUILD_PARALLEL_LEVEL: 12
  PYTHONUNBUFFERED: 1
  PIP_PARALLEL_DOWNLOADS: 10
  TF_ENABLE_ONEDNN_OPTS: 1
  NODE_OPTIONS: "--max-old-space-size=8192"

jobs:
  test:
    name: Test Neural Engine
    # Use self-hosted by default for neural-engine branches, GitHub-hosted for others
    runs-on: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.use_self_hosted == 'false') && 'ubuntu-latest' || contains(github.ref, 'neural') && fromJSON('["self-hosted", "neural-engine"]') || 'ubuntu-latest' }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python (GitHub-hosted)
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
      if: ${{ !contains(runner.name, 'neurascale-local') }}

    - name: Check Python (self-hosted)
      run: |
        python3 --version
        which python3
      if: ${{ contains(runner.name, 'neurascale-local') }}

    - name: Cache dependencies (GitHub-hosted)
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          neural-engine/venv
        key: ${{ runner.os }}-pip-${{ hashFiles('neural-engine/requirements*.txt') }}
      if: ${{ !contains(runner.name, 'neurascale-local') }}

    - name: Setup Python environment
      run: |
        cd neural-engine
        # Create virtual environment if it doesn't exist
        if [ ! -d "venv" ]; then
          python3 -m venv venv
        fi
        source venv/bin/activate
        echo "$PWD/venv/bin" >> $GITHUB_PATH
        echo "VIRTUAL_ENV=$PWD/venv" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        cd neural-engine
        source venv/bin/activate
        python -m pip install --upgrade pip
        # Install with parallelization and use all CPU cores
        pip install --use-feature=fast-deps --use-deprecated=legacy-resolver -r requirements.txt || pip install -r requirements.txt
        pip install --use-feature=fast-deps --use-deprecated=legacy-resolver -r requirements-dev.txt || pip install -r requirements-dev.txt
        # Install parallel testing tools
        pip install pytest-xdist pytest-parallel

    - name: Lint with flake8
      run: |
        cd neural-engine
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      run: |
        cd neural-engine
        mypy . --ignore-missing-imports || true

    - name: Test with pytest
      run: |
        cd neural-engine
        # Run tests in parallel using all available CPU cores
        pytest tests/ -v --cov=. --cov-report=xml -n auto --maxprocesses=12 --dist=loadscope || pytest tests/ -v --cov=. --cov-report=xml

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./neural-engine/coverage.xml
        flags: neural-engine

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker

    - name: Build and Push Images
      run: |
        cd neural-engine

        # Build processor image
        docker build -t gcr.io/$PROJECT_ID/neural-processor:$GITHUB_SHA \
                     -t gcr.io/$PROJECT_ID/neural-processor:latest \
                     -f docker/Dockerfile.processor .

        # Build API image
        docker build -t gcr.io/$PROJECT_ID/neural-api:$GITHUB_SHA \
                     -t gcr.io/$PROJECT_ID/neural-api:latest \
                     -f docker/Dockerfile.api .

        # Push images
        docker push gcr.io/$PROJECT_ID/neural-processor:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/neural-processor:latest
        docker push gcr.io/$PROJECT_ID/neural-api:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/neural-api:latest

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Deploy Cloud Functions
      run: |
        cd neural-engine/functions/neural_ingestion
        gcloud functions deploy neural-data-ingestion \
          --runtime python312 \
          --trigger-http \
          --entry-point ingest_neural_data \
          --region $REGION \
          --memory 2GB \
          --timeout 540s \
          --set-env-vars PROJECT_ID=$PROJECT_ID

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy neural-api-staging \
          --image gcr.io/$PROJECT_ID/neural-api:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --memory 2Gi \
          --cpu 2 \
          --set-env-vars PROJECT_ID=$PROJECT_ID

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY_PROD }}
        project_id: ${{ secrets.GCP_PROJECT_ID_PROD }}

    - name: Deploy to Production
      run: |
        echo "Production deployment requires manual approval"
        # Add production deployment steps here
