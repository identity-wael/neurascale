# Multi-stage Dockerfile for MCP Server
# Model Context Protocol server for neural data processing
# Using Alpine Linux for security

# Stage 1: Dependencies
FROM python:3.12.11-alpine3.21 AS dependencies
RUN apk update && apk upgrade --no-cache && rm -rf /var/cache/apk/*

WORKDIR /tmp

# Install build dependencies
RUN apk add --no-cache \
    build-base \
    gcc \
    g++ \
    musl-dev \
    linux-headers \
    libffi-dev \
    openssl-dev \
    # For async support
    libuv-dev \
    # For neural processing
    openblas-dev \
    lapack-dev \
    hdf5-dev \
    gfortran

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install Python dependencies
COPY neural-engine/requirements-minimal.txt ./
RUN pip install --upgrade pip setuptools wheel && \
    pip install -r requirements-minimal.txt && \
    pip install aiohttp uvloop

# Stage 2: Runtime
FROM python:3.12.11-alpine3.21 AS runtime
RUN apk update && apk upgrade --no-cache && rm -rf /var/cache/apk/*

# Install runtime dependencies
RUN apk add --no-cache \
    # Runtime libraries
    openblas \
    lapack \
    hdf5 \
    libgfortran \
    libstdc++ \
    libuv \
    # Security and networking
    ca-certificates \
    # Process management
    tini

# Create non-root user
RUN addgroup -S neural && adduser -S neural -G neural

# Copy virtual environment
COPY --from=dependencies /opt/venv /opt/venv

# Copy MCP server code
WORKDIR /app
COPY --chown=neural:neural neural-engine/src/mcp ./src/mcp

# Environment variables
ENV PATH="/opt/venv/bin:$PATH" \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app \
    MCP_ENV=production

# Create necessary directories
RUN mkdir -p /app/logs /app/tmp && \
    chown -R neural:neural /app

# Switch to non-root user
USER neural

# Expose MCP server port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
    CMD python -c "import aiohttp, asyncio; asyncio.run(aiohttp.ClientSession().get('http://localhost:3000/health'))" || exit 1

# Use tini for signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Start MCP server
CMD ["python", "-m", "src.mcp.servers.main", "--host", "0.0.0.0", "--port", "3000"]
