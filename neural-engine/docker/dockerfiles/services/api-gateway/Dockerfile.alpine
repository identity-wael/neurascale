# Multi-stage Dockerfile for API Gateway Service
# FastAPI-based GraphQL/REST API gateway
# Using Alpine Linux for security

# Stage 1: Dependencies
FROM python:3.12-alpine AS dependencies

WORKDIR /tmp

# Install build dependencies
RUN apk add --no-cache \
    build-base \
    gcc \
    musl-dev \
    libffi-dev \
    openssl-dev \
    postgresql-dev

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy and install requirements
COPY neural-engine/requirements-minimal.txt ./requirements.txt
COPY neural-engine/constraints.txt ./constraints.txt
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -c constraints.txt -r requirements.txt

# Stage 2: Runtime
FROM python:3.12-alpine AS runtime

# Install runtime dependencies
RUN apk add --no-cache \
    postgresql-libs \
    ca-certificates \
    curl \
    tini

# Create non-root user
RUN addgroup -S neural && adduser -S neural -G neural

# Copy virtual environment
COPY --from=dependencies /opt/venv /opt/venv

# Copy application code
WORKDIR /app
COPY --chown=neural:neural neural-engine/src ./src
COPY --chown=neural:neural neural-engine/api ./api

# Set environment variables
ENV PATH="/opt/venv/bin:$PATH" \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app \
    API_ENV=production

# Create necessary directories
RUN mkdir -p /app/logs && chown -R neural:neural /app

# Switch to non-root user
USER neural

# Expose ports
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Use tini for signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Start API Gateway
CMD ["uvicorn", "api.app:app", "--host", "0.0.0.0", "--port", "8000"]
